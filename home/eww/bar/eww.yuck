
; Clock
(defpoll clock_time :interval "200ms" "date +\%H")
(defpoll clock_minute :interval "200ms" "date +\%M")
(defpoll clock_second :interval "200ms" "date +\%S")
(defvar time_rev false)

(defwidget clock_module []
    (eventbox :onhover "${EWW_CMD} open calendar"
              :onhoverlost "${EWW_CMD} close calendar"
      (eventbox :onhover "${EWW_CMD} update time_rev=true"
                :onhoverlost "${EWW_CMD} update time_rev=false"
      (box :class "module" :space-evenly "false" :orientation "h" :spacing "3"
        (label :text clock_time :class "clock_hours" )
        (label :text ":" :class "clock_time_sep" )
        (label :text clock_minute :class "clock_minute_class")
        (revealer :transition "slideright" :reveal time_rev :duration "350ms"
          (box :space-evenly "false" :orientation "h" :spacing "3"
            (label :text ":" :class "clock_time_sep" )
            (label :text clock_second :class "clock_second_class")
))))))

; Calendar

(defpoll calendar_weekday :interval "10m" "date +'%A'")
(defpoll calendar_day :interval "10m" "date +'%d'")
(defpoll calendar_month :interval "10m" "date +'%B'")
(defpoll calendar_year :interval "10m" "date +'%Y'")

(defwidget cal []
	(box :class "calendar" :orientation "v" :space-evenly "false" :spacing "5"
	(box :class "row" :space-evenly "true" :spacing "5" :valign "center"
      (label :text calendar_day :class "calendar_day")
      (label :text calendar_weekday :class "calendar_weekday"))
	(box :class "row" :space-evenly "true" :spacing "5" :valign "center"
      (label :text calendar_month :class "calendar_month")
      (label :text calendar_year :class "calendar_year"))
))

(defwindow calendar
  :monitor 0
  :geometry (geometry :x "0px"
						:y "55px"
            :anchor "top center"
						)
(cal))

; Battery
(defwidget battery_module []
  (eventbox :onhover "${EWW_CMD} open battery"
            :onhoverlost "${EWW_CMD} close battery"
    (box :class "" :orientation "h" :space-evenly "false" :spacing "3"
      (metric :icon "Û∞Åπ" :value {jq(EWW_BATTERY, ".total_avg")})
)))

(defwidget metric [icon value ?onchange ?class]
  (box :class "metric" :orientation "h" :space-evenly "false" :spacing "10"
    (scale :class {class != "" ? class : "normal"}
           :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange
          :orientation "h")
    (label :text icon)
))

(defwindow battery
          :monitor 0
          :id "battery"
          :geometry (geometry :x "10px"
                              :y "55px"
                              :anchor "top right")
  (box :orientation "h" :space-evenly "false" :spacing "20"
    (label :text "${jq(EWW_BATTERY, ".BAT0.capacity")}%")
    (label :text {jq(EWW_BATTERY, ".BAT0.status")})
))

; Locations
(defwidget left []
	(box :orientation "h"
		 :space-evenly false
         :halign "start"
		 :class "right_modules"
))


(defwidget center []
	(box :orientation "h"
		 :space-evenly false
         :halign "center"
		 :class "center_modules"
(clock_module)))

(defwidget right []
	(box :orientation "h"
		 :space-evenly false
         :halign "end"
		 :class "left_modules"
(battery_module)))

(defwidget bar_1 []
  (box :class "bar_class"
       :orientation "h"
  (left)
  (center)
  (right)
    ))

(defwindow bar
          :monitor 0
          :id "bar"
          :geometry (geometry :x "0%"
                       :y "10px"
                       :width "98%"
                       :height "30px"
                       :anchor "top center")
          :stacking "fg"
          :windowtype "dock"
  (bar_1))

